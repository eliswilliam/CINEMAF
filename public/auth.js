// Arquivo de autentica√ß√£o para CINEHOME
// Gerencia prote√ß√£o de rotas e logout

/**
 * Verifica se o usu√°rio est√° autenticado
 * @returns {boolean} true se autenticado, false caso contr√°rio
 */
function isAuthenticated() {
  const token = localStorage.getItem('token');
  const userEmail = localStorage.getItem('userEmail');
  return !!(token && userEmail);
}

/**
 * Redireciona para a p√°gina de login se n√£o estiver autenticado
 * Use esta fun√ß√£o no in√≠cio das p√°ginas protegidas
 */
function requireAuth() {
  if (!isAuthenticated()) {
    console.log('‚ö†Ô∏è Usu√°rio n√£o autenticado, redirecionando para login...');
    window.location.href = 'login.html';
    return false;
  }
  return true;
}

/**
 * Realiza o logout do usu√°rio
 * Remove token e email do localStorage e redireciona para index.html
 */
function logout() {
  console.log('üëã Fazendo logout...');
  localStorage.removeItem('token');
  localStorage.removeItem('userEmail');
  window.location.href = 'index.html';
}

/**
 * Obt√©m informa√ß√µes do usu√°rio logado
 * @returns {{email: string, token: string} | null} Informa√ß√µes do usu√°rio ou null
 */
function getCurrentUser() {
  if (!isAuthenticated()) return null;
  return {
    email: localStorage.getItem('userEmail'),
    token: localStorage.getItem('token')
  };
}

/**
 * Exibe informa√ß√µes do usu√°rio na interface
 * @param {string} selector Seletor CSS do elemento onde exibir
 */
function displayUserInfo(selector) {
  const user = getCurrentUser();
  const element = document.querySelector(selector);
  
  if (!element) return;
  
  if (user) {
    element.textContent = `Ol√°, ${user.email}`;
  }
}

// Exportar fun√ß√µes para uso global
window.auth = {
  isAuthenticated,
  requireAuth,
  logout,
  getCurrentUser,
  displayUserInfo
};

console.log('üîê M√≥dulo de autentica√ß√£o carregado');
